name: yasmines-local-ai  # Sets the project/network name

volumes:
  n8n_storage:
  qdrant_storage:
  open-webui:
  flowise:
  caddy-data:
  caddy-config:
  valkey-data:  
  minio-data:  
  minio-config:  
  archon-workbench:

networks:
  yasmine-network:  # Creates a custom network
    name: yasmines-local-ai_default
    external: true

x-n8n: &service-n8n
  image: n8nio/n8n:1.88.0
  networks:
    - yasmine-network
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=supabase-db
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=host.docker.internal:11434
    - N8N_HOST=localhost
    - N8N_PORT=5678
    - N8N_EDITOR_BASE_URL=http://localhost:5678
    - WEBHOOK_URL=http://localhost:5678
    - TZ=America/New_York
    - GENERIC_TIMEZONE=America/New_York
    - NODE_FUNCTION_ALLOW_BUILTIN=*
    - NODE_FUNCTION_ALLOW_EXTERNAL=*
    - EXECUTIONS_DATA_SAVE_ON_ERROR=all
    - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
    - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true
    - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true

services:
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    networks:
      - yasmine-network
    environment:
      - PORT=3001
    ports:
      - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
      - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    networks:
      - yasmine-network
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    command: n8n import:workflow --input=/workflows
    volumes:
      - ./n8n/workflows:/workflows
    depends_on:
      - n8n

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks:
      - yasmine-network
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  caddy:
    container_name: caddy
    image: docker.io/library/caddy:2-alpine
    networks:
      - yasmine-network
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data:rw
      - caddy-config:/config:rw
    ports:
      - "80:80"
      - "443:443"
    environment:
      - N8N_HOSTNAME=${N8N_HOSTNAME:-":8001"}
      - WEBUI_HOSTNAME=${WEBUI_HOSTNAME:-":8002"}
      - FLOWISE_HOSTNAME=${FLOWISE_HOSTNAME:-":8003"}
      - OLLAMA_HOSTNAME=${OLLAMA_HOSTNAME:-":8004"}
      - SUPABASE_HOSTNAME=${SUPABASE_HOSTNAME:-":8005"}
      - SEARXNG_HOSTNAME=${SEARXNG_HOSTNAME:-":8006"}
      - MINIO_HOSTNAME=${MINIO_HOSTNAME:-":8007"}
      - ARCHON_HOSTNAME=${ARCHON_HOSTNAME:-":8008"}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-internal}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    networks:
      - yasmine-network
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    networks:
      - yasmine-network
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      - yasmine-network
    restart: unless-stopped
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio-data:/data
      - minio-config:/root/.minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    extra_hosts:
      - "host.docker.internal:host-gateway"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  archon-main:
    container_name: archon-main
    build:
      context: ./archon
      dockerfile: Dockerfile
    networks:
      - yasmine-network
    restart: unless-stopped
    ports:
      - "8501:8501"  # Streamlit UI
      - "8100:8100"  # Graph Service
    volumes:
      - ./archon:/app
      - archon-workbench:/app/workbench
    environment:
      - OLLAMA_API_BASE=http://host.docker.internal:11434
      - PYTHONUNBUFFERED=1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - archon-mcp

  archon-mcp:
    container_name: archon-mcp
    build:
      context: ./archon/mcp
      dockerfile: Dockerfile
    networks:
      - yasmine-network
    restart: unless-stopped
    ports:
      - "8200:8200"  # MCP Server
    volumes:
      - ./archon:/app
      - archon-workbench:/app/workbench
    environment:
      - PYTHONUNBUFFERED=1
    extra_hosts:
      - "host.docker.internal:host-gateway"

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    networks:
      - yasmine-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_INTERVAL=3600  # Check for updates every hour
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
